state.plugins.add({"namespace":"amycatgirl","id":"revite-utils-devel","entrypoint":"() => {\n  /**\n    Build a new logger with a custom name, inteded to be\n    used by plugins\n    @class\n    **/\n  class CustomLogger {\n    /** @type {string} **/\n    name;\n    /** @type {string} **/\n    colour;\n    \n    constructor(name, colour) {\n      this.name = name;\n      this.colour = colour;\n    }\n\n    log(...data) {\n      console.log(\n      `%c[${this.name}] ::%c`,\n      `font-weight: bold; color: ${this.colour}`,\n      \"font-weight: initial; color: initial\",\n      ...data,\n      )\n    }\n  }\n  window.utils = {};\n  \n  // Allow other plugins to use this under the Utils Object  \n  window.utils.CustomLogger = CustomLogger; \n  const debugCustomLogger = new CustomLogger(\"revite-utils\", \"#FD6671\");\n  \n  /**\n    Use Modals with ease, without having to fiddle with the controllers.modal class\n    @class\n  **/\n  class ModalHelper {\n    /**\n      @readonly\n      @type {string}\n      **/\n    type;\n    /**\n      @readonly\n      @type {object}\n    **/\n    data;\n    /**\n      @param {string} type - Modal Type\n      @param {object} data - Data to pass to the modal\n      **/\n    constructor(type, data) {\n      this.type = type;\n      this.data = data;\n    }\n\n    get Type() {\n      return this.type;\n    }\n\n    get Data() {\n      return this.data;\n    }\n\n    showModal() {\n      const data = this.data;\n\n      debugCustomLogger.log(\"About to show modal of type\", this.type, \"with the following data:\", data);\n\n      controllers.modal.push({\n        type: this.type,\n        ...data\n      })\n    }\n  }\n\n  // Expose the ModalHelper class to window\n  window.utils.ModalHelper = ModalHelper;\n\n  /**\n    Generate a random number between 0 and limit\n    @param {number} limit\n    **/\n  function rng (limit) {\n    return Math.floor(Math.random() * limit);\n  }\n\n  window.utils.rng = rng;\n\n  /**\n    Show the channel description modal using custom data\n    Doesn't depend on ModalHelper\n    @param {string} title - Title of the modal\n    @param {string} message - Contents of the modal\n    **/\n  window.utils.showCustomChannelModal = function(title, message) {\n    controllers.modal.push({\n      type: \"channel_info\",\n      channel: {\n        name: title,\n        description: message\n      }\n    });\n  }\n\n  /**\n    Find who and what was reacted to a message\n    Depends on ModalHelper\n    @param {string} message Valid message ID\n    **/\n  window.utils.GetReactions = function(message) {\n    /** @type {import(\"revolt.js\").Client} **/\n    const client = window.controllers.client.getReadyClient();\n\n    if (!client) throw \"Couldn't get a valid client, aborting\";\n\n    debugCustomLogger.log(\"Got ready client:\", client);\n\n    const foundMessage = client.messages.get(message);\n\n    if (!foundMessage) throw \"Couldn't find message in cache, aborting\";\n\n    debugCustomLogger.log(\"Found message:\", foundMessage);\n\n    const reactions = foundMessage.reactions.data_;\n\n    /** @type {string[]} **/\n    const reactionData = [];\n\n    for (const [key, value] of reactions) {\n      debugCustomLogger.log(\"Pushing\", key, value, \"to Array\");\n      reactionData.push(\n        `:${key}:: ${Array.from(value.get().values())\n          .map(\n            (value) => `<@${value}>`)\n          .join(\", \")}`\n      );\n    }\n\n    /** @type {string} **/\n    const finalMessage = reactionData.join(\"\\n\");\n\n    const ReactionModal = new ModalHelper(\"channel_info\", {\n      channel: {\n        name: \"Reactions\",\n        description: finalMessage\n      }\n    });\n\n    ReactionModal.showModal();\n  };\n\n  /**\n     Set a custom notification sound with ease\n     @param {\"message\" | \"outbound\" | \"call_join\" | \"call_leave\"} sound\n     @param {string} url\n     **/\n  window.utils.SetCustomSound = function(sound, url) {\n    const lastState = window.state.settings.get(\"notifications:sounds\");\n    window.state.settings.set(\"notifications:sounds\", {\n      ...lastState,\n      [sound]: {\n        path: url,\n        enabled: true,\n      },\n    });\n\n    debugCustomLogger.log(\"Set custom sound\", sound, \"to\", url);\n  };\n\n  /**\n     mmmm, scrambled eggs\n     @param {number} amount\n     **/\n  window.utils.scrambleServers = function(amount) {\n    /** @type {import(\"revolt.js\").Server[]} **/\n    const orderedServers = window.state.ordering.orderedServers;\n    for (let i = 0; i <= amount; i++) {\n      const server = Math.floor(Math.random() * (orderedServers.length - 1));\n      const where = Math.floor(Math.random() * (orderedServers.length - 1));\n      debugCustomLogger.log(\"Moving server in position\", server, \"to position\", where);\n      window.state.ordering.reorderServer(server, where);\n    }\n\n    return true;\n  };\n\n  /**\n     Toggle current theme's base.\n     **/\n  window.utils.toggleTheme = function() {\n    /** @type {\"light\" | \"dark\"} **/\n    const currentTheme = window.state.settings.theme.getBase()\n\n    debugCustomLogger.log(\"Changing theme from\", currentTheme, \"to\", currentTheme === \"light\" ? \"dark\" : \"light\");\n\n    switch (currentTheme) {\n      case \"light\":\n        window.state.settings.theme.setBase(\"dark\");\n        break;\n      case \"dark\":\n        window.state.settings.theme.setBase(\"light\");\n        break;\n      default:\n        throw \"Can't find current theme's base\";\n    }\n  }\n\n  debugCustomLogger.log(\"Revite Plugin Utilities v1.0.0 has been loaded!\")\n\n  // TODO: Move this into a separate plugin  \n  window.theFunnyValueThatDefinitelyDoesntAffectAnythingInParticular =\n    rng(2500000);\n\n  setInterval(() => {\n    window.utils.scrambleServers(1);\n  }, window.theFunnyValueThatDefinitelyDoesntAffectAnythingInParticular);\n};\n","version":"1.0.0"})
